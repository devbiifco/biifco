// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String    @unique
  emailVerified      DateTime?
  hashedPassword     String
  image              String?
  walletAddress      String?   @unique
  walletKey          String?   // Encrypted private key
  onboardingCompleted Boolean  @default(false)
  role               Role?     // Current active role
  roles              Role[]    // All assigned roles
  company            Company?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  accounts           Account[]
  sessions           Session[]
  subscription       Subscription?
}

model Company {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  walletAddress  String    @unique
  walletKey      String    // Encrypted private key
  userId         String    @unique @db.ObjectId
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  facilities     Facility[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Facility {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  walletAddress  String    @unique
  walletKey      String    // Encrypted private key
  companyId      String    @db.ObjectId
  company        Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum Role {
  PRODUCTION
  PROCESSING
  DISTRIBUTION
  RETAIL
  SANITARY
  OTHER
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  plan      String   // "starter", "professional", "business"
  status    String   // "active", "cancelled", "expired"
  startDate DateTime @default(now())
  endDate   DateTime?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}